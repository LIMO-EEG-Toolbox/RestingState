

export_folder = fullfile(STUDY.filepath,['connectivity_results' filesep 'HERMES_CSVS']);
connect_types = {'COH','COR','wPLI','iCOH','xCOR','DPI','PLI','PLV','RHO'};
mkdir(export_folder);

[n,p,~] = size(indexes.COH.data{1});
Nconn   = ((n*p)-n)/2;
for c=1:length(connect_types)
    results = NaN(Nconn,size(STUDY.subject,2),max(STUDY.session));
    for s=1:size(EEG,2)
        % connectivity values
        tmp = squeeze(nanmean(real(indexes.(connect_types{c}).data{s}),1));
        tmp = triu(tmp); tmp(tmp==0) = [];
        % subject - session name
        subject = str2double(EEG(s).subject(5:end));
        results(:,subject,EEG(s).session) = tmp';
    end
    % export sessions
    for session = 1:3
        writetable(array2table(squeeze(results(:,:,session))), ...
            fullfile(export_folder,['Hermes_csv_1' connect_types{c} '_session-' num2str(session) '.csv']));
    end
end


'Unable to perform assignment because the size of the left side is 1770-by-1 and the
size of the right side is 5970-by-1.'

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This works hopefully:

export_folder = fullfile(pwd, ['connectivity_results' filesep 'HERMES_CSVS']);
hermes_metrics = {'COH', 'COR', 'iCOH','xCOR','DPI','PLI', 'PLV','RHO','wPLI'};
mkdir(export_folder);

num_subs = size(indexes.(hermes_metrics{1}).data, 2);
num_sessions = size(indexes.(hermes_metrics{1}).data, 1);

% Check if a given metric needs to be averaged over frequencies/bands:
for s = 1:length(hermes_metrics)
    if (all(~any(strcmp(indexes.(hermes_metrics{s}).dimensions, 'frequency')))  == 0 | all(~any(strcmp(indexes.(hermes_metrics{s}).dimensions, 'band')))  == 0)
        for i = 1:num_subs
            for j = 1:num_sessions
                data = indexes.(hermes_metrics{s}).data{j, i}; % Access the data from the metric
                averagedData = mean(data, 3); % Compute the average along the third dimension (frequencies/bands)
                indexes.(hermes_metrics{s}).data{j, i} = averagedData; % Assign the averaged data back to metrics
            end
        end
    end
end

% Convert data to CSV files
for s = 1:length(hermes_metrics)
    metric_data = indexes.(hermes_metrics{s}).data; % Get the data for the current metric
    
    for j = 1:num_sessions
        session_data = []; % Initialize an empty matrix to store data for each subject
        
        for i = 1:num_subs
            % Get the upper triangle of the symmetric matrix
            data = triu(metric_data{j, i});
            % Convert the upper triangle data to a vector
            data_vector = data(triu(true(size(data)), 1));
            % Append the data vector for the subject
            session_data = [session_data, data_vector];
        end
        
        % Create a table from the data matrix
        table_data = array2table(session_data);
        
        % Generate variable names
        var_names = cellstr(num2str((1:num_subs)', 'Subject_%d'));
        table_data.Properties.VariableNames = var_names;
        
        % Create a CSV file for the current session:
        csv_filename = fullfile(export_folder, ['session' num2str(j) '_' hermes_metrics{s} '.csv']);
        writetable(table_data, csv_filename);
    end
end


indexes.(hermes_metrics{1}).data{5, j};
