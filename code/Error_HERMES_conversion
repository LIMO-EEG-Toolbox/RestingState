

export_folder = fullfile(STUDY.filepath,['connectivity_results' filesep 'HERMES_CSVS']);
connect_types = {'COH','COR','wPLI','iCOH','xCOR','DPI','PLI','PLV','RHO'};
mkdir(export_folder);

[n,p,~] = size(indexes.COH.data{1});
Nconn   = ((n*p)-n)/2;
for c=1:length(connect_types)
    results = NaN(Nconn,size(STUDY.subject,2),max(STUDY.session));
    for s=1:size(EEG,2)
        % connectivity values
        tmp = squeeze(nanmean(real(indexes.(connect_types{c}).data{s}),1));
        tmp = triu(tmp); tmp(tmp==0) = [];
        % subject - session name
        subject = str2double(EEG(s).subject(5:end));
        results(:,subject,EEG(s).session) = tmp';
    end
    % export sessions
    for session = 1:3
        writetable(array2table(squeeze(results(:,:,session))), ...
            fullfile(export_folder,['Hermes_csv_1' connect_types{c} '_session-' num2str(session) '.csv']));
    end
end


'Unable to perform assignment because the size of the left side is 1770-by-1 and the
size of the right side is 5970-by-1.'



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

export_folder = fullfile(pwd,['connectivity_results' filesep 'HERMES_CSVS']);
hermes_metrics = {'COH','COR','iCOH','PLV'};
mkdir(export_folder);

[n,p,~] = size(indexes.COH.data{1});
Nconn   = ((n*p)-n)/2;
for c=1:length(hermes_metrics)
    results = NaN(Nconn,size(STUDY.subject,2),max(STUDY.session));
    for s=1:size(EEG,2)
        % connectivity values
        tmp = squeeze(nanmean(real(indexes.(hermes_metrics{c}).data{s}),3));
        tmp = triu(tmp); tmp(tmp==0) = [];
        % subject - session name
        subject = str2double(EEG(s).subject(5:end));
        results(:,subject,EEG(s).session) = tmp';
    end
    % export sessions
    for session = 1:3
        writetable(array2table(squeeze(results(:,:,session))), ...
            fullfile(export_folder,['Hermes_csv_1' connect_types{c} '_session-' num2str(session) '.csv']));
    end
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
export_folder = fullfile(pwd,['connectivity_results' filesep 'HERMES_CSVS']);
hermes_metrics = {'COH','COR','iCOH','PLV'};
mkdir(export_folder);

num_subs = size(indexes.(hermes_metrics{1}).data,2)
num_conditions = size(indexes.(hermes_metrics{1}).data,1)

% Check if a given metric needs to be averaged over frequencies
for s=1:length(hermes_metrics)
    if all(~any(strcmp(indexes.(hermes_metrics{s}).dimensions,'frequency'))) == 0
       averagedArray = cell(num_subs,num_conditions);
       for i = 1:num_subs
            for j = 1:num_conditions
                data = indexes.(hermes_metrics{s}).data{i,j} % Access the data from the cell array
                averagedData = mean(data,3) % Compute the average along the third dimension (frequencies)
                averagedArray{i, j} = averagedData; % Store the averaged data in a new cell array
            end    
        end
end        



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Average the data over the frequencies dimension
averagedArray = cell(3, 3);
for i = 1:num_subs
    for j = 1:num_conditions
        data = indexes.COH.data{i, j}; % Access the data from the cell array
        averagedData = mean(data, 3); % Compute the average along the third dimension (frequencies)
        averagedArray{i, j} = averagedData; % Store the averaged data in a new cell array
    end
end

if ~any(strcmp(CELL,'a'))




